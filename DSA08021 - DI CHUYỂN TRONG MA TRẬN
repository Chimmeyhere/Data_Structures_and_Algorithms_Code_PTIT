#include <bits/stdc++.h>
using namespace std;
struct data
{
    int fi;
    int se;
    int th;
};
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    cin >> t;
    while (t--)
    {
        int n, m, ans = -1;
        cin >> n >> m;
        struct data x, y;
        queue<data> q;
        vector<vector<int>> a(n + 1, vector<int>(m + 1));
        vector<vector<bool>> check(n + 1, vector<bool>(m + 1, 1));
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                cin >> a[i][j];
            }
        }
        check[1][1] = 0;
        x.fi = 1;
        x.se = 1;
        x.th = 0;
        q.push(x);
        while (q.size())
        {
            x = q.front();
            q.pop();
            if (x.fi == n && x.se == m)
            {
                ans = x.th;
                break;
            }
            y.fi = x.fi;
            y.se = x.se + a[x.fi][x.se];
            y.th = x.th + 1;
            if (y.fi <= n && y.se <= m && check[y.fi][y.se])
            {
                check[y.fi][y.se] = 0;
                q.push(y);
            }
            y.fi = x.fi + a[x.fi][x.se];
            y.se = x.se;
            if (y.fi <= n && y.se <= m && check[y.fi][y.se])
            {
                check[y.fi][y.se] = 0;
                q.push(y);
            }
        }
        cout << ans << endl;
    }
}
/* Do Xuan Huong
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@##################@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@#############################@@@@@@@@@@@@@@@@
@@@@@@@@@@@@&####################################@@@@@@@@@@@@
@@@@@@@@@@##########################################@@@@@@@@@
@@@@@@@@##############################################@@@@@@@
@@@@@@#################################################@@@@@@
@@@@@####################################################@@@@
@@@%#####################@@@@@@@@@@@######################@@@
@@@###################@@@@@@@@@@@@@@@@@####################@@
@@##################@@@@@@         @@@@@@##################@@
@@#################@@@@@             @@@@###################@
@@@@@@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@@@@@@@
@                  &@@@@             @@@@           .......@@
@@                  @@@@@@         @@@@@@           .......@@
@@                    @@@@@@@@@@@@@@@@@            .......@@@
@@@                      @@@@@@@@@@@               ......@@@@
@@@@                                              ......@@@@@
@@@@@@                                           ......@@@@@@
@@@@@@@                                         .....@@@@@@@@
@@@@@@@@@                                     .....@@@@@@@@@@
@@@@@@@@@@@@                                ....@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@                         ....@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@%                .@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
*/
